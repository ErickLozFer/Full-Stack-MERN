# mongosh
Current Mongosh Log ID:65f60772a7db4c67844594a4
Connecting to:mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.1.5
Using MongoDB:7.0.6
Using Mongosh:2.1.5

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

To help improve our products, anonymous usage data is collected and sent to MongoDB periodically (https://www.mongodb.com/legal/privacy-policy).
You can opt-out by running the disableTelemetry() command.

------
   The server generated these startup warnings when booting
   2024-03-16T20:56:11.013+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem
   2024-03-16T20:56:12.119+00:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
   2024-03-16T20:56:12.119+00:00: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. We suggest setting it to 'never'
   2024-03-16T20:56:12.119+00:00: vm.max_map_count is too low
------


// Paso 1: Crear la base de datos
test> use db_my_first_db
switched to db db_my_first_db
db_my_first_db> show dbs
admin    8.00 KiB
config  12.00 KiB
local    8.00 KiB

//Paso 2: Crear la colección
db_my_first_db> db.createCollection("students")
{ ok: 1 }

// Paso 3: Insertar 5 estudiantes
db_my_first_db> db.students.insertMany([
...     { name: "Estudiante 1", home_state: "California", lucky_number: 7, birthday: { month: 5, day: 10, year: 1995 }},
...     { name: "Estudiante 2", home_state: "Washington", lucky_number: 9, birthday: { month: 8, day: 20, year: 1996 }},
...     { name: "Estudiante 3", home_state: "California", lucky_number: 3, birthday: { month: 3, day: 5, year: 1997 }},
...     { name: "Estudiante 4", home_state: "New York", lucky_number: 6, birthday: { month: 10, day: 15, year: 1998 }},
...     { name: "Estudiante 5", home_state: "Washington", lucky_number: 12, birthday: { month: 12, day: 25, year: 1999 }}
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('65f609d0a7db4c67844594a5'),
    '1': ObjectId('65f609d0a7db4c67844594a6'),
    '2': ObjectId('65f609d0a7db4c67844594a7'),
    '3': ObjectId('65f609d0a7db4c67844594a8'),
    '4': ObjectId('65f609d0a7db4c67844594a9')
  }
}

// Paso 4: Obtener todos los estudiantes
db_my_first_db> db.students.find()
[
  {
    _id: ObjectId('65f609d0a7db4c67844594a5'),
    name: 'Estudiante 1',
    home_state: 'California',
    lucky_number: 7,
    birthday: { month: 5, day: 10, year: 1995 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a6'),
    name: 'Estudiante 2',
    home_state: 'Washington',
    lucky_number: 9,
    birthday: { month: 8, day: 20, year: 1996 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a7'),
    name: 'Estudiante 3',
    home_state: 'California',
    lucky_number: 3,
    birthday: { month: 3, day: 5, year: 1997 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a8'),
    name: 'Estudiante 4',
    home_state: 'New York',
    lucky_number: 6,
    birthday: { month: 10, day: 15, year: 1998 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a9'),
    name: 'Estudiante 5',
    home_state: 'Washington',
    lucky_number: 12,
    birthday: { month: 12, day: 25, year: 1999 }
  }
]

// Paso 5: Obtener estudiantes de California o Washington
db_my_first_db> db.students.find({ $or: [{ home_state: "California" }, { home_state: "Washington" }]})
[
  {
    _id: ObjectId('65f609d0a7db4c67844594a5'),
    name: 'Estudiante 1',
    home_state: 'California',
    lucky_number: 7,
    birthday: { month: 5, day: 10, year: 1995 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a6'),
    name: 'Estudiante 2',
    home_state: 'Washington',
    lucky_number: 9,
    birthday: { month: 8, day: 20, year: 1996 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a7'),
    name: 'Estudiante 3',
    home_state: 'California',
    lucky_number: 3,
    birthday: { month: 3, day: 5, year: 1997 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a9'),
    name: 'Estudiante 5',
    home_state: 'Washington',
    lucky_number: 12,
    birthday: { month: 12, day: 25, year: 1999 }
  }
]

// Paso 6: Obtener estudiantes con lucky_number mayor que 3
db_my_first_db> db.students.find({ lucky_number: { $gt: 3 }})
[
  {
    _id: ObjectId('65f609d0a7db4c67844594a5'),
    name: 'Estudiante 1',
    home_state: 'California',
    lucky_number: 7,
    birthday: { month: 5, day: 10, year: 1995 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a6'),
    name: 'Estudiante 2',
    home_state: 'Washington',
    lucky_number: 9,
    birthday: { month: 8, day: 20, year: 1996 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a8'),
    name: 'Estudiante 4',
    home_state: 'New York',
    lucky_number: 6,
    birthday: { month: 10, day: 15, year: 1998 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a9'),
    name: 'Estudiante 5',
    home_state: 'Washington',
    lucky_number: 12,
    birthday: { month: 12, day: 25, year: 1999 }
  }
]

// Paso 7: Obtener estudiantes con lucky_number menor o igual a 10
db_my_first_db> db.students.find({ lucky_number: { $lte: 10 }})
[
  {
    _id: ObjectId('65f609d0a7db4c67844594a5'),
    name: 'Estudiante 1',
    home_state: 'California',
    lucky_number: 7,
    birthday: { month: 5, day: 10, year: 1995 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a6'),
    name: 'Estudiante 2',
    home_state: 'Washington',
    lucky_number: 9,
    birthday: { month: 8, day: 20, year: 1996 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a7'),
    name: 'Estudiante 3',
    home_state: 'California',
    lucky_number: 3,
    birthday: { month: 3, day: 5, year: 1997 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a8'),
    name: 'Estudiante 4',
    home_state: 'New York',
    lucky_number: 6,
    birthday: { month: 10, day: 15, year: 1998 }
  }
]

// Paso 8: Obtener estudiantes con lucky_number entre 1 y 9
db_my_first_db> db.students.find({ lucky_number: { $gte: 1, $lte: 9 }})
[
  {
    _id: ObjectId('65f609d0a7db4c67844594a5'),
    name: 'Estudiante 1',
    home_state: 'California',
    lucky_number: 7,
    birthday: { month: 5, day: 10, year: 1995 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a6'),
    name: 'Estudiante 2',
    home_state: 'Washington',
    lucky_number: 9,
    birthday: { month: 8, day: 20, year: 1996 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a7'),
    name: 'Estudiante 3',
    home_state: 'California',
    lucky_number: 3,
    birthday: { month: 3, day: 5, year: 1997 }
  },
  {
    _id: ObjectId('65f609d0a7db4c67844594a8'),
    name: 'Estudiante 4',
    home_state: 'New York',
    lucky_number: 6,
    birthday: { month: 10, day: 15, year: 1998 }
  }
]

// Paso 9: Agregar campo 'intereses' a cada estudiante
db_my_first_db> db.students.updateMany({}, { $set: { intereses: ["codificación", "brunch", "MongoDB"] }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 5,
  modifiedCount: 5,
  upsertedCount: 0
}

// Paso 10: Agregar intereses únicos para cada estudiante
db_my_first_db> db.students.update({ name: "Estudiante 1" }, { $addToSet: { intereses: "fútbol" }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 0,
  upsertedCount: 0
}
db_my_first_db> db.students.update({ name: "Estudiante 2" }, { $addToSet: { intereses: "arte" }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 0,
  upsertedCount: 0
}
db_my_first_db> db.students.update({ name: "Estudiante 3" }, { $addToSet: { intereses: "viajar" }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 0,
  upsertedCount: 0
}
db_my_first_db> db.students.update({ name: "Estudiante 4" }, { $addToSet: { intereses: "música" }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 0,
  upsertedCount: 0
}
db_my_first_db> db.students.update({ name: "Estudiante 5" }, { $addToSet: { intereses: "lectura" }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

// Paso 11: Agregar 'impuestos' de intereses y luego eliminarlo
db_my_first_db> db.students.updateMany({}, { $push: { intereses: "impuestos" }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 5,
  modifiedCount: 5,
  upsertedCount: 0
}
db_my_first_db> db.students.updateMany({}, { $pull: { intereses: "impuestos" }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 5,
  modifiedCount: 5,
  upsertedCount: 0
}

// Paso 12: Eliminar estudiantes de California
db_my_first_db> db.students.deleteMany({ home_state: "California" })
{ acknowledged: true, deletedCount: 2 }

// Paso 13: Eliminar un estudiante por su nombre
db_my_first_db> db.students.deleteOne({ name: "Estudiante 5" })
{ acknowledged: true, deletedCount: 1 }

// Paso 14: Eliminar un estudiante cuyo lucky_number sea mayor que 5 (SOLO UNO)
db_my_first_db> db.students.deleteOne({ lucky_number: { $gt: 5 }})
{ acknowledged: true, deletedCount: 1 }

// Paso 15: Agregar campo 'number_of_belts' y configurarlo en 0
db_my_first_db> db.students.updateMany({}, { $set: { number_of_belts: 0 }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

// Paso 16: Incrementar 'number_of_belts' en 1 para estudiantes en Washington
db_my_first_db> db.students.updateMany({ home_state: "Washington" }, { $inc: { number_of_belts: 1 }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}

// Paso 17: Cambiar nombre del campo 'number_of_belts' a 'belts_earned'
db_my_first_db> db.students.updateMany({}, { $rename: { "number_of_belts": "belts_earned" }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

// Paso 18: Eliminar el campo 'lucky_number'
db_my_first_db> db.students.updateMany({}, { $unset: { "lucky_number": "" }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

// Paso 19: Agregar campo 'updated_on' y establecer valor como fecha actual
db_my_first_db> db.students.updateMany({}, { $currentDate: { updated_on: true }})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}